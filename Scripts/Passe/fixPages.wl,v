head	1.12;
access;
symbols;
locks
	Masso:1.12; strict;
comment	@# @;


1.12
date	2021.02.28.13.04.22;	author Masso;	state Exp;
branches;
next	1.11;

1.11
date	2021.02.22.19.01.09;	author Masso;	state Exp;
branches;
next	1.10;

1.10
date	2021.02.22.18.52.27;	author Masso;	state Exp;
branches;
next	1.9;

1.9
date	2021.02.22.18.48.40;	author Masso;	state Exp;
branches;
next	1.8;

1.8
date	2021.02.22.16.44.55;	author Masso;	state Exp;
branches;
next	1.7;

1.7
date	2021.02.22.16.36.24;	author Masso;	state Exp;
branches;
next	1.6;

1.6
date	2021.02.22.12.32.13;	author Masso;	state Exp;
branches;
next	1.5;

1.5
date	2021.02.22.12.28.34;	author Masso;	state Exp;
branches;
next	1.4;

1.4
date	2021.02.22.12.10.36;	author Masso;	state Exp;
branches;
next	1.3;

1.3
date	2021.02.22.08.27.19;	author Masso;	state Exp;
branches;
next	1.2;

1.2
date	2021.02.22.08.26.52;	author Masso;	state Exp;
branches;
next	1.1;

1.1
date	2021.02.22.02.30.31;	author Masso;	state Exp;
branches;
next	;


desc
@@


1.12
log
@*** empty log message ***
@
text
@(* -*- mode:math -*- *)
(* Mahn-Soo Choi *)
(* $Date: 2021-02-23 04:01:09+09 $ *)
(* $Revision: 1.11 $ *)

(* USASGE: ./Q3MakePaclet.wls *)
(* USASGE: /usr/local/bin/wolframscript -file Q3MakePaclet.wls *)

pacletName = "Q3";

cwd = DirectoryName[$InputFileName];
appDir = FileNameDrop[cwd, -1];
pacletDir = FileNameJoin @@ {appDir, pacletName};
documentationDir = FileNameJoin @@ {pacletDir, "Documentation", "English"};

guidesDir = FileNameJoin @@ {documentationDir, "Guides"};
symbolsDir = FileNameJoin @@ {documentationDir, "ReferencePages", "Symbols"};
tutorialsDir = FileNameJoin @@ {documentationDir, "Tutorials"};


SetAttributes[Unless, HoldRest];
Unless[condition_, out_] := If[Not[condition], out];


notebookBackup[nb_NotebookObject, opts___?OptionQ] := CopyFile[
  NotebookFileName[nb],
  NotebookFileName[nb]<>"~",
  opts,
  OverwriteTarget -> True
 ]


fixStyleSheet[nb_NotebookObject] := Module[
  { sty, new },
  sty = StyleDefinitions /. Options[nb, StyleDefinitions];
  new = sty /. {
    "FunctionPageStyles.nb" -> "FunctionPageStylesExt.nb",
    "TechNotePageStyles.nb" -> "TechNotePageStylesExt.nb",
    "TutorialPageStyles.nb" -> "TechNotePageStylesExt.nb",
    "GuidePageStyles.nb" -> "GuidePageStylesExt.nb"
   };
  Unless[ sty == new,
    Print[sty, "\n\t-> ", new];
    Unless[ FailureQ @@ notebookBackup[nb],
      FrontEndExecute[SetOptions[nb, StyleDefinitions -> new]];
      NotebookSave[nb]
     ]
   ];
  new
 ]


fixPacletName::nopaclet = "No cell with label Paclet Name in ``."

fixPacletName[nb_NotebookObject] := Module[
  { obj, dat },

  NotebookRead /@@ Cells[nb]; (* I don't know why, but this is necessary.*)
  
  obj = Cells[nb, CellLabel -> "Paclet Name"];
  If[ Length[obj] == 0,
    Message[fixPacletName::nopaclet, NotebookFileName[nb]];
    Return[]
   ];

  obj = First[obj];
  dat = NotebookRead[obj];
  
  Unless[ First[dat] == "Q3",
    Unless[ FailureQ @@ notebookBackup[nb],
      Print[NotebookFileName[nb], ": ", First @@ dat];
      NotebookWrite[obj, ReplacePart[dat, 1 -> "Q3"]];
      NotebookSave[nb]
     ];
   ];
 ]


fixMoreAbout[nb_NotebookObject] := Module[
  { cells, obj, new, data },
  cells = Cells[ nb,
    CellStyle -> (
      "MoreAbout" | "GuideMoreAbout" | "TutorialMoreAbout" |
      "Tutorials" | "RelatedTutorials" | "GuideTutorial"
     )
   ];
  If[ Length[cells] == 0,
    Return[],
    $temporaryOut = PrintTemporary @@ NotebookFileName[nb];
   ];

  Table[
    data = NotebookRead[obj];
    new  = data /. {
      (* guides *)
      "paclet:Q3/guide/Quisso" -> "paclet:Q3/guide/QuissoPackageGuide",
      "paclet:Q3/guide/Pauli" -> "paclet:Q3/guide/PauliPackageGuide",
      "paclet:Q3/guide/Wigner" -> "paclet:Q3/guide/WignerPackageGuide",
      "paclet:Q3/guide/Grassmann" -> "paclet:Q3/guide/GrassmannPackageGuide",
      "paclet:Q3/guide/Fock" -> "paclet:Q3/guide/FockPackageGuide",
      "paclet:Q3/guide/Cauchy" -> "paclet:Q3/guide/CauchyPackageGuide",
      "paclet:Q3/guide/Dicke" -> "paclet:Q3/guide/DickePackageGuide",
      (* tutorials *)
      "paclet:Q3/tutorial/Quisso" -> "paclet:Q3/tutorial/QuissoQuickStart",
      "paclet:Q3/tutorial/Pauli" -> "paclet:Q3/tutorial/PauliQuickStart",
      "paclet:Q3/tutorial/Wigner" -> "paclet:Q3/tutorial/WignerQuickStart",
      "paclet:Q3/tutorial/Grassmann" -> "paclet:Q3/tutorial/GrassmannQuickStart",
      "paclet:Q3/tutorial/Fock" -> "paclet:Q3/tutorial/FockQuickStart",
      "paclet:Q3/tutorial/Cauchy" -> "paclet:Q3/tutorial/CauchyQuickStart",
      "paclet:Q3/tutorial/Dicke" -> "paclet:Q3/tutorial/DickeQuickStart",
      "paclet:Q3/tutorial/Q3" -> "paclet:Q3/tutorial/Q3QuickStart"
     };
    Unless[ data === new,
      PrintTemporary[data, "\t-->\t", new];
      notebookBackup[nb];
      NotebookWrite[obj, new];
      NotebookSave[nb]
     ],
    {obj, cells}
   ];
 ]


$pkgs = {"Cauchy", "Dicke", "Fock", "Pauli", "Quisso", "Wigner"};
  
$pttn = Alternatives @@@@ Join[
  StringJoin["paclet:Q3/guide/",#]& /@@ $pkgs,
  StringJoin["paclet:Q3/tutorial/",#]& /@@ $pkgs,
  { "paclet:Q3/tutorial/Q3Overview" }
 ];

$rule = Join[
  Thread[
    Map[StringJoin["paclet:Q3/guide/",#]&, $pkgs] ->
      Map[StringJoin["paclet:Q3/guide/",#, "PackageGuide"]&, $pkgs]
   ],
  Thread[
    Map[StringJoin["paclet:Q3/tutorial/",#]&, $pkgs] ->
      Map[StringJoin["paclet:Q3/tutorial/",#, "QuickStart"]&, $pkgs]
   ],
  { "paclet:Q3/tutorial/Q3Overview" ->
      "paclet:Q3/tutorial/Q3ReferenceManual" }
 ];

fixButtonData[nb_NotebookObject] := Module[
  { data, news, this },
  data = NotebookGet[nb];

  this = Options[#, ButtonData]& /@@ Cases[data, _ButtonBox, Infinity];
  this = Select[Flatten @@ Values[this], StringQ];
  this = Cases[this, $pttn];
  If[ Length[this] < 1,
    PrintTemporary["No URI to fix in ", NotebookFileName[nb]];
    Return[]
   ];

  PrintTemporary[NotebookFileName[nb], ": ", this];
  news = data /. $rule;
  If[ news === data, Return[] ];

  notebookBackup[nb];
  NotebookPut[news, nb];
  NotebookSave[nb];
 ]


(* ****** *)

files = FileNames["*.nb", {tutorialsDir}];
files = FileNames["*.nb", {guidesDir}];
files = FileNames["*.nb", {symbolsDir}];
files = FileNames["*.nb", {documentationDir}, 3];

(* files = files[[;;20]]; *)
  

fixPages[] := Check[
  $temporaryOut = PrintTemporary["Start"];
  Scan[
    Function[ file,
      (* Print["\nWorking on ", file]; *)
      Module[
        { nb },
        nb = NotebookOpen[file, Visible -> False];
        (* NOTE: Do NOT put Visible -> False. If you do, the cell groups are
           screwed up. *)
        Unless[ FailureQ[nb],
          (* fixStyleSheet[nb]; *)
          (* fixPacletName[nb]; *)
          (* fixMoreAbout[nb]; *)
          fixButtonData[nb];
         ];
        NotebookClose[nb];
       ]
     ],
    files
   ],
  $Failed
 ]
@


1.11
log
@Summary: bug fix in fixButtonData
@
text
@d3 2
a4 2
(* $Date: 2021-02-23 03:52:27+09 $ *)
(* $Revision: 1.10 $ *)
d56 1
a56 1
  { obj, new, dat },
d114 1
a114 1
      PrintTemporary[data, "\t-->\t", new]
d146 1
a146 1
  { data, news, pkgs, pttn, this, rule },
d183 1
a183 1
        { nb, sty },
@


1.10
log
@Summary: fixButtonData[]
@
text
@d3 2
a4 2
(* $Date: 2021-02-23 03:48:40+09 $ *)
(* $Revision: 1.9 $ *)
d153 1
a153 1
    PrintTemporary["No URI to fix in ", NotebooFileName[nb]];
d163 1
@


1.9
log
@Summary: fixButtonData
@
text
@d3 2
a4 2
(* $Date: 2021-02-23 01:44:55+09 $ *)
(* $Revision: 1.8 $ *)
d161 1
d190 1
a190 1
          None;
@


1.8
log
@*** empty log message ***
@
text
@d3 2
a4 2
(* $Date: 2021-02-23 01:36:24+09 $ *)
(* $Revision: 1.7 $ *)
d124 41
@


1.7
log
@Summary: fixMoreAbout
@
text
@d3 2
a4 2
(* $Date: 2021-02-22 21:32:13+09 $ *)
(* $Revision: 1.6 $ *)
d131 1
a131 1
files = files[[;;20]];
d147 2
a148 1
          fixMoreAbout[nb];
@


1.6
log
@*** empty log message ***
@
text
@a0 1
#!/usr/bin/env wolframscript
d3 2
a4 2
(* $Date: 2021-02-22 21:28:34+09 $ *)
(* $Revision: 1.5 $ *)
d25 5
a29 5
notebookBackup[nb_NotebookObject, opts__?OptionQ] := Unless[
  Lookup[NotebookInformation[nb], "ModifiedInMemory"],
  CopyFile[ NotebookFileName[nb], NotebookFileName[nb]<>"~", opts,
    OverwriteTarget -> True
   ]
d79 45
d131 6
a136 2
Check[
  UsingFrontEnd @@ Scan[
d141 1
a141 1
        nb = NotebookOpen[file];
d146 2
a147 1
          fixPacletName[nb];
d154 2
a155 2
  Print["Failed!"]
 ];
@


1.5
log
@Summary: fixPacletName works now.
@
text
@d4 2
a5 2
(* $Date: 2021-02-22 21:10:36+09 $ *)
(* $Revision: 1.4 $ *)
d25 1
@


1.4
log
@Summary: fixPacletName
@
text
@d4 2
a5 2
(* $Date: 2021-02-22 17:27:19+09 $ *)
(* $Revision: 1.3 $ *)
d21 1
d32 1
a69 1
    Print[NotebookFileName[nb], ": ", First @@ dat];
d71 3
a73 2
      Print["Paclet Name = ", First @@ dat];
      (* NotebookWrite[obj, ReplacePart[dat, 1 -> "Q3"]] *)
d78 3
@


1.3
log
@*** empty log message ***
@
text
@d4 2
a5 2
(* $Date: 2021-02-22 17:26:52+09 $ *)
(* $Revision: 1.2 $ *)
d22 1
a22 1
Unless[condition_, out_] := If[TrueQ[condition], Null, out];
d24 1
a24 1
notebookBackup[nb_] := Unless[
d26 3
a28 1
  CopyFile[NotebookFileName[nb], NotebookFileName[nb]<>"~"]
d31 1
a31 1
fixStyleSheet[nb_] := Module[
d51 25
a75 1
files = FileNames["*.nb", {symbolsDir}];
d78 2
d84 1
a84 1
      Print["\nWorking on ", file];
d91 2
a92 1
          fixStyleSheet[nb];
@


1.2
log
@Summary: fixStyleSheet works
@
text
@d4 2
a5 2
(* $Date: 2021-02-22 11:30:31+09 $ *)
(* $Revision: 1.1 $ *)
d29 1
a29 1
fixStyleSheets[nb_] := Module[
d63 1
a63 1
          fixStyleSheets[nb];
@


1.1
log
@Initial revision
@
text
@d4 2
a5 2
(* $Date: 2021-02-16 13:31:11+09 $ *)
(* $Revision: 1.4 $ *)
d22 1
d24 4
a27 1
Unless[condition_, out_] := If[TrueQ[condition], Null, out];
d39 5
a43 2
    Print["sty = ", sty];
    Print["new = ", new];
d46 1
a46 1
 ];
d50 1
a51 1
files = FileNames["*.nb", {tutorialsDir}];
d59 7
a65 2
        nb = NotebookOpen[file, Visible -> False];
        fixStyleSheets[nb];
d71 1
a71 1
 ];@
